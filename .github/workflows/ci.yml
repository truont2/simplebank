# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12-alpine
        # Provide the password for postgres
        env:
          POSTGRES_DB: simple_bank
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
        ports:
        # need to specify and expose the port mapping that we are using for the application
        # expose the 5433 port that connects to the 5432 port of the docker container
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
      id: go

    - name: Check out code into the Go module directory 
      uses: actions/checkout@v3

    - name: Install golang-migrate
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate.linux-amd64 /usr/bin/migrate
        which migrate

    - name: Run migrations
      run: migrate -path db/migration -database "postgresql://root:secret@localhost:5433/simple_bank?sslmode=disable" -verbose up

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
